里式替換原則(Liskov Substitution Principle)

OO中的繼承性的思考和說明
1. 繼承包含這樣一層涵義: 父類中凡是已經實現好的方法，實際上是在設定規範和契約，雖然它不強制要求所有的子類要遵循這些契約，但是如果子類
   對這些已經實現的方法進行修改，就會對整個繼承體系造成破壞
2. 繼承在給程序設計帶來便利的同時，也帶來了弊端，比如使用繼承會給程序帶來侵入性，程序的可移植性降低，增加對象間的耦合性，如果一個類被
   其他類所繼承，則當這個類需要修改時，必須考慮到所有的子類，並且父類修改後，所有涉及到子類的功能都有可能故障
3. 問題提出: 在編程中，如何正確地使用繼承? => 里式替換原則

基本介紹
1. 如果對每個類型為T1的對象o1，都有類型為T2的對象o2，使得以T1定義的所有程序P1在所有的對象o1都替換成o2時，程序P1的行為沒有發生變化(理
   想情況)，那麼類型T2是類型T1的子類，換句話說，所有引用基類的地方都必須能透明地使用其子類的對象
   => 此段話可以理解為: T2定義的所有程序P2，在將對象o1替換成o2後，程式會改成執行P2而非P1，極端情況下，P2全都覆寫了P1的所有方法，這就
      違反了里式替換原則，也就沒有繼承的必要了
2. 在使用繼承時，應遵循里式替換原則，在子類中盡量不要重寫父類的方法
3. 里式替換原則告訴我們，繼承實際上讓兩個類的耦合性增強了，在適當的情況下，可以通過聚合、組合、依賴來解決問題

範例(Liskov1.java)
1. 我們發現原來運行正常的相減功能發生了問題，原因就是類B無意中重寫了類A的方法，造成原有功能出現錯誤，在實際開發中，我們常會通過重寫父
   類方法完成子類的新功能，雖然這樣寫起來簡單，但整個繼承體系的復用性會比較差，特別是運行多態比較頻繁的時候
2. 通用做法: 原來的父類和子類都繼承一個更通俗的基類，原有的繼承關係去掉，要採用聚合、組合、依賴等關係替代

