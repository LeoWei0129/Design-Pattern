迪米特法則(Demeter Principle)

基本介紹
1. 一個對象應該對其他對象保持最少的了解
2. 類與類關係越密切，耦合性越大
3. 迪米特法則又叫做最少知道法則，即一個類對自己依賴的類知道得越少越好，也就是說，不管被依賴的類有多複雜，都盡量將邏輯封裝在被依賴的類
   的內部，對外除了提供public方法，不對外洩漏任何訊息
4. 迪米特法則還有個更簡單的定義: 只與直接的朋友通信
5. 直接的朋友: 每個對象都會與其他對象有耦合關係，只要兩個對象之間有耦合關係，我們就說這兩個對象之間是朋友關係。耦合的方式很多，如依賴、
   關聯、組合、聚合等，其中，我們稱出現在成員變量、方法參數、方法返回值的類為直接朋友，而出現在局部變量的類不是直接朋友，也就是說，陌
   生的類不要以局部變量的形式出現在類的內部

案例(Demeter1.java)
要求: 有一個學校，轄下有學院和總部，現要求打印出總部員工ID和各學院員工ID

改進思路
1. 前面設計的問題在於UniversityManager中CollegeEmployee不是UniversityManager的直接朋友
2. 按照迪米特法則，應該要避免類中出現這樣子的非直接朋友

注意事項和細節
1. 迪米特法則的核心是降低類之間的耦合度
2. 但是注意: 由於每個類都減少了不必要的依賴，因此迪米特法則只是要求"降低"類(對象)間的耦合關係，並不是要求完全沒有依賴關係