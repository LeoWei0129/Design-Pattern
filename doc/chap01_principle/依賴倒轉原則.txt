依賴倒轉原則(Dependency Inversion Principle)

基本介紹
1. 高層模塊不應該依賴低層模塊，兩者都應該依賴其抽象(抽象類or接口)
2. 抽象不應該依賴細節，細節應該依賴抽象
3. 依賴倒轉的中心思想是面相接口編程
4. 依賴倒轉原則是基於這樣的設計理念: 相對於細節的多變性，抽象的東西要穩定的多，以抽象為基礎搭建的建構比以細節為基礎搭建的建構要穩定的
   多。在Java中，抽象指的是接口或抽象類，細節指的是實現類
5. 使用接口或抽象類的目的是制定好規範，而不涉及任何具體的操作，把展現具體的任務交給他們的實現類去完成

依賴關係傳遞的三種方式和應用案例
1. 接口傳遞
2. 構造方法傳遞
3. setter方式傳遞

依賴倒轉原則的注意事項和細節
1. 低層模塊都盡量要有接口或抽象類，或者都有，程式穩定性更好
2. 變量的聲明類型盡量是抽象類或接口，這樣我們的變量引用和實際對象間，就存在一個緩衝層，利於程式的擴展和維護
3. 繼承時遵循里式替換原則
