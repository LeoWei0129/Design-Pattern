開閉原則(Open Closed Principle)

基本介紹
1. 開閉原則是編程中最基礎、最重要的原則
2. 一個軟件實體如類、模塊、函數應該對擴展開放(對提供方而言)，對修改關閉(對使用方而言)，用抽象構建框架，用實現擴展細節
3. 當軟件需要變化時，盡量通過擴展軟件實體的行為來實現變化，而不是通過已有的代碼來實現變化
4. 編程中遵循原則以及其他設計模式的目的就是遵循開閉原則

案例(OpenClosed1.java)
1. 優點是好理解，簡單易操作
2. 缺點是違反了開閉原則，即對擴展開放(對提供方而言)，對修改關閉(對使用方而言)，即當我們給類增加新功能時，盡量不修改代碼，或者盡可能少
   修改代碼
3. 比如我們要新增一個圖形類別，我們會需要修改GraphicEditor類里的代碼，且修改的地方很多

方式1的改進案例的思路分析
把創建的Shape類做成抽象類，並提供一個抽象的draw方法，讓子類去實現即可，這樣我們有新的圖形種類時，只須要讓新的圖形類去繼承Shape，並實
現draw方法即可
=> 使用方的代碼不需修改，滿足了開閉原則